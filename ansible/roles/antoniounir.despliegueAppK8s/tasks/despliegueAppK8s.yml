---
# Tareas para el despliegue de una aplicacion en el cluster de kubernetes
# Tareas forman parte del rol antoniounir.despliegueAppK8s
# Revisar el fichero de variables a configurar para este rol(roles\antoniounir.despliegueAppK8s\vars\main.yml)
# Tareas a realizar:
# - Creacion del namespaces asociado a la aplicacion
#   Como paso previso se comprueba si dicho namespaces esta ya creado, en cuyo caso se borra
# - Eliminan los ficheros de despligue asociados a la aplicacion anteriores
# - Se crean los ficheros asociados a cada elemento:
#          - Se crea el fichero con la definicion del Persistent Volumne
#          - Se crea el fichero con la definicion del Persistent Volumne Claim
#          - Se crea el fichero con la definicion del Deployment
#          - Se crea el fichero con la definicion del Service
#          - Se crea el fichero con la definicion del Ingress
#          - Se crea el fichero con la definicion del ConfigMap
# - Se crea el fichero de despligue de la aplicacion uniendo todos los ficheros anteriores
# - Se despliega la aplicacion a partir del fichero .yml generado

  - name: Verificar si el namespace ya esta creado con tratamiento de errores
    block:
        - name: Verificar si el namespace "{{app_name}}" ya esta creado
          command: kubectl get namespaces "{{app_name}}"
          register: verificacion
        
        - name: Re-Creamos el namespaces "{{app_name}}" (eliminamos)
          command: kubectl delete namespaces "{{app_name}}"
        
        - name: Re-Creamos el namespaces "{{app_name}}" (creamos)
          command: kubectl create namespace "{{app_name}}"
        
    rescue:  
        - debug: var=verificacion
        
        - name: Creacion del namespace
          command: kubectl create namespace "{{app_name}}"
          when:
            - '" (NotFound)"  in verificacion.stderr'   


#Se eliminan los ficheros de despliegue generados anteriormente
  - name: Eliminar ficheros de despliegue anteriores
    file:
       path: "{{item}}"
       state: absent
    with_items:
       - 'persistenVolumneFile-{{app_name}}'
       - 'persistenVolumneClaimFile-{{app_name}}'
       - 'deploymentFile-{{app_name}}'
       - 'serviceFile-{{app_name}}'
       - 'ingressFile-{{app_name}}'
       - 'configMapFile-{{app_name}}'
       - '{{app_name}}.yml'



  - name: Creacion del fichero para el Persisten Volume
    lineinfile:
        path: 'persistenVolumneFile-{{app_name}}'
        line: "{{item}}"
        state: present
        create: yes
    with_items: 
        - '---'
        - '   '
        - 'apiVersion: v1'
        - 'kind: PersistentVolume'
        - 'metadata:'
        - '  name: {{app_name}}-nfs-pv'
        - '  namespace: {{app_name}}'
        - 'spec:'
        - '  capacity:'
        - '    storage: 8Gi'
        - '  volumeMode: Filesystem'
        - '  accessModes:'
        - '    - ReadWriteMany'
        - '  persistentVolumeReclaimPolicy: Recycle'
        - '  storageClassName: nfs'
        - '  mountOptions:'
        - '    - hard'
        - '    - nfsvers=4.1'
        - '  nfs:'
        - '    path: {{shared_dir}}'
        - '    server: {{server_nfs_ip}}'


  - name: Creacion del fichero para el Persisten Volume Claim
    lineinfile:
        path: 'persistenVolumneClaimFile-{{app_name}}'
        line: "{{item}}"
        state: present
        create: yes
    with_items: 
        - '---'
        - '   '
        - 'apiVersion: v1'
        - 'kind: PersistentVolumeClaim'
        - 'metadata:'
        - '  name: {{app_name}}-nfs-pvc'
        - '  namespace: {{app_name}}'
        - 'spec:'
        - '  storageClassName: nfs'
        - '  accessModes:'
        - '    - ReadWriteMany'
        - '  resources:'
        - '    requests:'
        - '      storage: 2Gi'


  - name: Creacion del fichero de Deployment
    lineinfile:
        path: 'deploymentFile-{{app_name}}'
        line: "{{item}}"
        state: present
        create: yes
    with_items: 
        - '---'
        - '   '
        - 'apiVersion: apps/v1'
        - 'kind: Deployment'
        - 'metadata:'
        - '  name: {{app_name}}'
        - '  namespace: {{app_name}}'
        - '  labels:'
        - '    app: {{app_name}}'
        - 'spec:'
        - '  replicas: {{num_replicas}}'
        - '  selector:'
        - '    matchLabels:'
        - '      app: {{app_name}}'
        - '  template:'
        - '    metadata:'
        - '      labels:'
        - '         app: {{app_name}}'
        - '    spec:'
        - '      containers:'
        - '      - name: {{app_name}}'
        - '        image: {{url_img_app}}'
        - '        ports:'
        - '        - containerPort: 80'
        - '        readinessProbe:'
        - '          httpGet:'
        - '            path: /'
        - '            port: 80'
        - '          initialDelaySeconds: 5'
        - '          periodSeconds: 5'
        - '          successThreshold: 1'


  - name: Creacion del fichero del Servicio
    lineinfile:
        path: 'serviceFile-{{app_name}}'
        line: "{{item}}"
        state: present
        create: yes
    with_items: 
        - '---'
        - '   '
        - 'apiVersion: v1'
        - 'kind: Service'
        - 'metadata:'
        - '    name: {{app_name}}-service'
        - '    namespace: {{app_name}}'
        - 'spec:'
        - '    selector:'
        - '      app: {{app_name}}'
        - '    ports:'
        - '    - name: http'
        - '      protocol: TCP'
        - '      port: 80'
        - '      targetPort: 80'
# port hace referencia al puerto donde escuchará el servicio y targetPort indica el puerto donde se encuentra la aplicación dentro del contenedor.


  - name: Creacion del fichero del ingress
    lineinfile:
        path: 'ingressFile-{{app_name}}'
        line: "{{item}}"
        state: present
        create: yes
    with_items: 
        - '---'
        - '   '
        - 'apiVersion: networking.k8s.io/v1'
        - 'kind: Ingress'
        - 'metadata:'
        - '  name: {{app_name}}'
        - '  namespace: {{app_name}}'
        #- '  annotations:'
        #- '      haproxy.org/path-rewrite: /'
        - 'spec:'
        - '  rules:'
        - '  - host: {{host_name}}'  # Peticiones que lleguen desde este virtual host seran encaminadas hacia el path OJO, al ser un nombre debe de haber DNS o en su defecto el fichero hosts
        - '    http:'
        - '      paths:'
        - '      - path: {{app_path}}'
        - '        pathType: Prefix'
        - '        backend:'
        - '          service:'
        - '            name: {{app_name}}-service'
        - '            port:'
        - '              number: 80'


  - name: Creacion de la Config Map
    lineinfile:
        path: 'configMapFile-{{app_name}}'
        line: "{{item}}"
        state: present
        create: yes
    with_items:
        - '---'
        - '   '
        - 'apiVersion: v1'
        - 'kind: ConfigMap'
        - 'metadata:'
        - '  name: haproxy-configmap-{{app_name}}'
        - '  namespace: {{app_name}}'
        - 'data:'
        - '  servers-increment: "42"'
        - '  ssl-redirect: "OFF"'


  - name: Crear fichero yaml Despliegue
    shell: cat "{{item}}" | tee -a "{{app_name}}".yml
    with_items:
        - 'persistenVolumneFile-{{app_name}}'
        - 'persistenVolumneClaimFile-{{app_name}}'
        - "deploymentFile-{{app_name}}"
        - "serviceFile-{{app_name}}"
        - "ingressFile-{{app_name}}"
        - "configMapFile-{{app_name}}"


  - name: Despliegue de la aplicacion
    command: kubectl apply -f "{{app_name}}".yml