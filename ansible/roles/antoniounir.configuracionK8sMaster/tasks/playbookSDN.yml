---
# Tareas para la instalacion de una SDN (calico en nuestro caso) en Kubernetes
# Tareas forman parte del rol antoniounir.configuracionK8sMaster
# Revisar el fichero de variables a configurar para este rol(roles\antoniounir.configuracionK8sMaster\vars\main.yml)
# Tareas a realizar:
# - Instalar el operador definido(Tigera en nuestro caso). Módulo command de Ansible
# - Obtener el fichero de definiciond ela SDN.Módulo command de Ansible
# - Configurar la SDN con la CIDR personalizada. Módulo lineinfile de Ansible
# - Instalar la SDN.Módulo command de Ansible
# - Esperar a que el mastes este Ready.Módulo shell de Ansible
#   Hacemos 50 intentos,esperando 10 segundos entre intentos

  - name: Instalacion operador Tigera
    command: kubectl create -f "{{ tigera_url }}"


  - name: Obtencion fichero definicion Calico
    command:
         cmd: wget "{{ calico_url }}"
         warn: no


  - name: Configuracion Calico con CIDR personalizada
    lineinfile:
        path: ./custom-resources.yaml
        line: "{{item}}"
        state: present
        create: yes
    with_items:
       - "# This section includes base Calico installation configuration."
       - "# For more information, see: https://docs.projectcalico.org/v3.17/reference/installation/api#operator.tigera.io/v1.Installation"
       - "apiVersion: operator.tigera.io/v1"
       - "kind: Installation"
       - "metadata:"
       - "  name: default"
       - "spec:"
       - "  # Configures Calico networking."
       - "  calicoNetwork:"
       - "    # Note: The ipPools section cannot be modified post-install."
       - "    ipPools:"
       - "    - blockSize: 26"
       - "      cidr: {{ PODs_red }}"
       - "      encapsulation: VXLANCrossSubnet"
       - "      natOutgoing: Enabled"
       - "      nodeSelector: all()"


  - name: Instalacion Calico
    command: kubectl apply -f custom-resources.yaml


  - name: Esperar a que Master este READY
    shell: "/usr/bin/kubectl get nodes"
    register: nodes
    until:      
      - '" Ready "  in nodes.stdout'      
    retries: 50
    delay: 10



